from django.core.urlresolvers import get_callable
from formwizard.storage import get_storage

def wizard(request, wizard, step_views={}, *args, **kwargs):
    """
    This is the default view to call from the routing engine.

    After processing the request using the `_process_request` method, the
    response gets updated by the storage engine (for example add cookies).
    """
    wizard.storage = get_storage(wizard.storage_name, wizard.get_wizard_name(), request)

    if not 'default' in step_views:
        step_views['default'] = 'formwizard.views.wizard_default_step'

    response = _process_request(request, wizard, step_views, *args, **kwargs)
    response = wizard.storage.update_response(response)

    return response

def wizard_default_step(request, wizard, *args, **kwargs):
    """
    This is the default function called to handle the logic of a step view.

    It generates a HttpResponse which contains either the current step (if form
    validation wasn't successful), the next step (if the current step was stored
    successful) or the done view (if no more steps are available)
    """
    form = wizard.get_form(data=request.POST)

    if form.is_valid():
        wizard.storage.set_step_data(wizard.determine_step(), wizard.process_step(form))

        if wizard.determine_step() == wizard.get_last_step():
            return wizard.render_done(request, form, *args, **kwargs)
        else:
            return wizard.render_next_step(request, form, *args, **kwargs)

    return wizard.render(request, form)

def _process_request(request, wizard, step_views={}, *args, **kwargs):
    """
    Returns a response generated by either `_process_get_request` or
    `_process_post_request` (depends on `request.method`).
    """
    if request.method == 'GET':
        return _process_get_request(request, wizard, *args, **kwargs)
    else:
        return _process_post_request(request, wizard, step_views, *args, **kwargs)

def _process_get_request(request, wizard, *args, **kwargs):
    """
    In case of a GET request, it assumes that the user just starts at the first
    step or wants to restart the process. The wizard will be resetted before
    rendering the first step.
    """
    wizard.reset_wizard()

    if 'extra_context' in kwargs:
        wizard.update_extra_context(kwargs['extra_context'])

    wizard.storage.set_current_step(wizard.get_first_step())
    return wizard.render(request, wizard.get_form())

def _process_post_request(request, wizard, step_views={}, *args, **kwargs):
    """
    In case of a POST request, it assumes that the user is going through the
    wizard process. If provided in the routing engine, a custom step view is
    called. Otherwise, the default `wizard_default_step` is called to handle the
    step logic in a classic way.
    """
    if 'extra_context' in kwargs:
        wizard.update_extra_context(kwargs['extra_context'])

    if request.POST.has_key('form_prev_step') and wizard.form_list.has_key(request.POST['form_prev_step']):
        return wizard.render_backward(request)

    current_step = wizard.storage.get_current_step()

    if current_step in step_views:
        step_view = get_callable(step_views[current_step])
    else:
        step_view = get_callable(step_views['default'])

    return step_view(request, wizard, *args, **kwargs)
